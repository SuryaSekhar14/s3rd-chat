// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  clerkUserId   String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Encrypted API keys for multi-device sync (optional)
  openaiApiKey      String?  // Encrypted OpenAI API key
  anthropicApiKey   String?  // Encrypted Anthropic API key
  googleApiKey      String?  // Encrypted Google API key
  deepseekApiKey    String?  // Encrypted DeepSeek API key
  
  // Relations
  conversations Conversation[]
  
  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String   @default("New Chat")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  
  @@index([userId, updatedAt(sort: Desc)])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  content        String
  isUser         Boolean
  aiModel        String?  // AI model used to generate this message (null for user messages)
  promptTokens   Int?     // Tokens used in the prompt (only for AI messages)
  completionTokens Int?   // Tokens used in the completion (only for AI messages)
  createdAt      DateTime @default(now())
  
  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}
