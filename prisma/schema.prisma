// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  clerkUserId   String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Encrypted API keys for multi-device sync (optional)
  openaiApiKey      String?  // Encrypted OpenAI API key
  anthropicApiKey   String?  // Encrypted Anthropic API key
  googleApiKey      String?  // Encrypted Google API key
  deepseekApiKey    String?  // Encrypted DeepSeek API key
  
  // Relations
  conversations Conversation[]
  documents     Document[]
  
  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String   @default("New Chat")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  
  @@index([userId, updatedAt(sort: Desc)])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  content        String
  isUser         Boolean
  aiModel        String?  // AI model used to generate this message (null for user messages)
  promptTokens   Int?     // Tokens used in the prompt (only for AI messages)
  completionTokens Int?   // Tokens used in the completion (only for AI messages)
  attachments    Json?    // JSON array of attachments (images, files, etc.)
  createdAt      DateTime @default(now())
  
  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId, createdAt(sort: Desc)], map: "messages_conversation_created_desc_idx")
  @@index([conversationId, createdAt(sort: Asc)], map: "messages_conversation_created_asc_idx")
  @@map("messages")
}

model Document {
  id          String   @id @default(cuid())
  userId      String
  filename    String
  originalUrl String   // URL to the original PDF file in blob storage
  textContent String   // Extracted text content from the PDF
  pageCount   Int      // Number of pages in the PDF
  fileSize    Int      // File size in bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt(sort: Desc)])
  @@map("documents")
}

model AnonymousSession {
  id          String   @id @default(cuid())
  sessionId   String   @unique // Could be IP address or browser fingerprint
  messageCount Int      @default(0)
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())
  
  @@index([sessionId])
  @@index([lastUsed])
  @@map("anonymous_sessions")
}
